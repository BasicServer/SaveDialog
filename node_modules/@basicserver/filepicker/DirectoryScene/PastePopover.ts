import { DirectorySceneCfg } from './DirectoryScene';
import { ComputedState, Text } from '@frugal-ui/base';
import { cp } from '@basicserver/fs-frontend';
import { rename } from '@basicserver/fs-frontend';
import { updateLists } from '..';
import { State } from '@frugal-ui/base';
import { Popover } from '@frugal-ui/base';
import { Button } from '@frugal-ui/base';
import { VStack } from '@frugal-ui/base';
import { Separator } from '@frugal-ui/base';
import { getDirectoryListing } from '../helpers';
import { DirectoryItem } from '../Data/DirectoryItem';

export function PastePopover(configuration: DirectorySceneCfg) {
	const { clipboard, path } = configuration;

	const isClipboardEmpty = new ComputedState({
		statesToBind: [clipboard.name, clipboard.path],
		initialValue: true,
		compute(self) {
			self.value = clipboard.path.value == '';
		},
	});

	async function paste(action: 'copy' | 'move') {
		try {
			const src = clipboard.path.value;
			let destName = clipboard.name.value;

			//check if same-name item exists
			const listing = await getDirectoryListing(path);
			const sameNameItem = listing.find((item) => item.name == destName);

			if (sameNameItem != undefined) {
				//analyze filename
				const parts = destName.split('.');
				const extractedName = parts.splice(0, 1);
				const suffixes = parts.join('.');
				const countingRegex = new RegExp(
					`^${extractedName}-([0-9]*).${suffixes}$`,
				);

				//get already pasted siblings
				const countedSiblings = listing.filter(
					(item) => countingRegex.test(item.name) == true,
				);
				const highestSibling: DirectoryItem | undefined =
					countedSiblings.reverse()[0];
				const highestNumberString =
					highestSibling == undefined
						? '0'
						: highestSibling.name.replace(countingRegex, '$1');
				const highestNumber = parseInt(highestNumberString);
				const newNumber = highestNumber + 1;
				const suffixText = newNumber.toString().padStart(3, '0');

				destName = `${extractedName}-${suffixText}.${suffixes}`;
			}

			const dest = `${path}/${destName}`;

			switch (action) {
				case 'copy':
					await cp(src, dest);
					break;
				case 'move':
					await rename(src, dest);
					clipboard.path.value = dest;
					break;
			}

			updateLists();
		} catch (error) {
			alert(`Failed to ${action} to ${path}: ${error}`);
		}
	}

	const isOpen = new State(false);
	return Popover({
		accessibilityLabel: 'copy or move here',
		isOpen,
		toggle: Button({
			accessibilityLabel: 'copy or move here',
			iconName: 'paste',
			action: () => (isOpen.value = !isOpen.value),
		}).toggleAttr('disabled', isClipboardEmpty),
		content: VStack(
			Text(clipboard.name)
				.cssMaxWidth('100%')
				.cssOverflow('hidden')
				.cssTextOverflow('ellipsis')
				.cssWhiteSpace('nowrap')
				.cssTextAlign('left'),
			Separator(),
			Button({
				accessibilityLabel: 'copy here',
				text: 'Copy here',
				action: () => paste('copy'),
			}),
			Button({
				accessibilityLabel: 'move here',
				text: 'Move here',
				action: () => paste('move'),
			}),
		)
			.cssWidth('14rem')
			.cssHeight('auto')

			.useDefaultSpacing()
			.useDefaultPadding(),
	});
}
