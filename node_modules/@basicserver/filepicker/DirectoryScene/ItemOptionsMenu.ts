import { ItemTextCfg } from './ItemText';
import { State } from '@frugal-ui/base';
import { rm } from '@basicserver/fs-frontend';
import { updateLists } from '..';
import { rename } from '@basicserver/fs-frontend';
import { Popover } from '@frugal-ui/base';
import { Button } from '@frugal-ui/base';
import { ButtonStyles } from '@frugal-ui/base';
import { VStack } from '@frugal-ui/base';
import { Label } from '@frugal-ui/base';
import { Input } from '@frugal-ui/base';
import { TextInputCfg } from '@frugal-ui/base';
import { Separator } from '@frugal-ui/base';

export function ItemOptionsMenu(configuration: ItemTextCfg) {
	const { clipboard, parent, isDirectory, selectedItem } = configuration;
	let { itemName, path } = configuration;

	const isOpen = new State(false);
	const newItemName = new State(itemName);

	async function deleteItem() {
		try {
			await rm(path);
			if (clipboard.path.value == path) {
				clipboard.name.value = '';
				clipboard.path.value = '';
			}
			selectedItem.clear();
		} catch {
			alert(`Failed to delete "${name}"`);
		}

		updateLists();
	}
	async function renameItem() {
		try {
			const newName = newItemName.value;
			const newPath = `${parent}/${newName}`;
			await rename(path, newPath);

			if (clipboard.path.value == path) {
				clipboard.path.value = newPath;
				clipboard.name.value = newName;
			}

			itemName = newName;
			path = newPath;
		} catch {
			alert(`Failed to rename "${name}"`);
		}

		updateLists();
	}
	function copyItem() {
		clipboard.name.value = itemName;
		clipboard.path.value = path;
		isOpen.value = false;
	}

	return Popover({
		isOpen,
		accessibilityLabel: 'options',
		toggle: Button({
			style: ButtonStyles.Transparent,
			accessibilityLabel: 'show options',
			iconName: 'more_vert',
			action: () => (isOpen.value = !isOpen.value),
		}).cssColor('inherit'),
		content: VStack(
			// name
			Label(
				'Name',
				Input(new TextInputCfg(newItemName, 'Untitled'))
					.addToClass('forcing-default-styles')
					.registerKeyboardShortcuts({
						key: 'Enter',
						action: renameItem,
					}),
			),
			Button({
				accessibilityLabel: 'rename item',
				iconName: 'edit',
				text: 'Rename',
				action: renameItem,
			}).addToClass('forcing-default-styles'),
			Separator(),

			// actions
			//open
			Button({
				accessibilityLabel: 'open file',
				iconName: 'open_in_new',
				text: 'Open',
				action: () =>
					window.open(`${window.location.origin}/file/${path}`),
			})
				.hideConditionally(isDirectory)
				.addToClass('forcing-default-styles'),

			//copy
			Button({
				accessibilityLabel: 'copy file',
				iconName: `${isDirectory ? 'folder' : 'file'}_copy`,
				text: 'Copy',
				action: copyItem,
			}).addToClass('forcing-default-styles'),

			//delete
			Button({
				style: ButtonStyles.Destructive,
				accessibilityLabel: 'delete item',
				iconName: 'delete',
				text: 'Delete',
				action: deleteItem,
			}).addToClass('forcing-default-styles'),
		)
			.cssHeight('auto')
			.cssWidth('18rem')
			.useDefaultPadding()
			.useDefaultSpacing(),
	}).listen('keydown', (event) => event.stopPropagation());
}
