import { SelectedItem } from '../Data/SelectedItem';
import { Clipboard } from '../Data/Clipboard';
import { DirectoryItemTypes } from '../Data/DirectoryItem';
import { Component, GenericScene, Popover, State } from '@frugal-ui/base';
import { SceneTypes } from '@frugal-ui/base';
import { VStack } from '@frugal-ui/base';
import { Header } from '@frugal-ui/base';
import { PastePopover } from './PastePopover';
import { Button } from '@frugal-ui/base';
import { CreationPopover } from './CreationPopover';
import { writeFile } from '@basicserver/fs-frontend';
import { mkdir } from '@basicserver/fs-frontend';
import { DirectoryItemList } from './DirectoryItemList';
import { Spacer } from '@frugal-ui/base';
import { updateLists } from '..';

export interface DirectorySceneCfg {
	rootName: string;
	isFirst: boolean;
	path: string;
	selectedItem: SelectedItem;
	allowedTypes: DirectoryItemTypes[];
	clipboard: Clipboard;
}

export class DirectoryScene extends GenericScene<DirectorySceneCfg> {
	draw(data: DirectorySceneCfg): Component<any> {
		const { rootName, isFirst, path } = data;

		this.type = SceneTypes.Column;
		this.accessibilityLabel = `directory ${rootName}`;

		const isAddPopoverOpen = new State(false);

		return VStack(
			Header(
				{
					text: rootName,
				},
				PastePopover(data),
				Button({
					accessibilityLabel: 'refresh directory list',
					iconName: 'refresh',
					action: updateLists,
				}).hideConditionally(isFirst == false),
				Popover({
					accessibilityLabel: 'add item',
					isOpen: isAddPopoverOpen,
					toggle: Button({
						accessibilityLabel: 'add item',
						iconName: 'add',
						action: () =>
							(isAddPopoverOpen.value = !isAddPopoverOpen.value),
					}),
					content: VStack(
						CreationPopover({
							typeName: 'File',
							iconName: 'note_add',
							creationFn: async (newName) => {
								await writeFile(`${path}/${newName}`, '');
								isAddPopoverOpen.value = false;
							},
						}),
						CreationPopover({
							typeName: 'Directory',
							iconName: 'create_new_folder',
							creationFn: async (newName) => {
								await mkdir(`${path}/${newName}`);
								isAddPopoverOpen.value = false;
							},
						}),
					)
						.cssWidth('16rem')
						.cssHeight('auto')
						.useDefaultSpacing()
						.useDefaultPadding(),
				}),
			),

			DirectoryItemList({
				...data,
				parentScene: this,
			}),

			Spacer(),
		);
	}

	setup() {
		this.view.cssWidth('24rem');
	}
}
