import { IdentifiableDirectoryItem } from '../Data/IdentifiableDirectoryItem';
import { Component } from '@frugal-ui/base';
import { NavigationLink } from '@frugal-ui/base';
import { DirectorySceneCfg } from './DirectoryScene';
import { DirectoryScene } from './DirectoryScene';
import { ItemText } from './ItemText';
import { UUID } from '@frugal-ui/base';
import { SelectingListItem } from '@frugal-ui/base';
import { DirectoryItemTypes } from '../Data/DirectoryItem';
import { DirectoryItemListCfg } from './DirectoryItemList';

export interface DirectoryItemViewCfg extends DirectoryItemListCfg {
	item: IdentifiableDirectoryItem;
	parent: string;
}

export function DirectoryItemView(configuration: DirectoryItemViewCfg) {
	const { clipboard, item, selectedItem, parentScene, parent } =
		configuration;
	const path = `${parent}/${item.name}`;

	let component: Component<any>;

	if (item.isDirectory == true) {
		component = NavigationLink<DirectorySceneCfg>(
			{
				accessibilityLabel: item.name,
				parentScene,
				destination: DirectoryScene,
				data: {
					isFirst: false,
					path,
					rootName: item.name,
					selectedItem,
					allowedTypes: configuration.allowedTypes,
					clipboard,
				},
			},
			...ItemText({
				...configuration,
				path,
				itemName: item.name,
				isDirectory: item.isDirectory,
			}),
		)
			.cssPaddingLeft('0rem')
			.cssPaddingTop('0rem')
			.cssPaddingBottom('0rem');
	} else {
		const uuid = new UUID();
		component = SelectingListItem(
			{
				ownValue: uuid,
				selection: configuration.parentScene.linkSelection,
				isExclusive: true,
			},
			...ItemText({
				...configuration,
				path,
				itemName: item.name,
				isDirectory: item.isDirectory,
			}),
		)
			.useDefaultSpacing()
			.cssPaddingLeft('0rem')
			.cssPaddingTop('0rem')
			.cssPaddingBottom('0rem')

			.listen('click', () => {
				parentScene.stage.goBackTo(parentScene.depth);
				parentScene.linkSelection.selectedItems.value = [uuid];
			});
	}

	return component.listen('click', () => {
		if (
			(item.isDirectory == true &&
				configuration.allowedTypes.indexOf(
					DirectoryItemTypes.Directory,
				) == -1) ||
			(item.isDirectory == false &&
				configuration.allowedTypes.indexOf(DirectoryItemTypes.File) ==
					-1)
		) {
			selectedItem.clear();
			return;
		}

		selectedItem.set(item.name, path, item.isDirectory);
	});
}
